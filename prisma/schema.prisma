generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isAdmin       Boolean?  @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Recipe        Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String
  temps       String
  difficulte  Int      @default(1)
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  etapes      Etape[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ingrediant {
  id     Int     @id @default(autoincrement())
  name   String?
  etapes Etape[]
  // recipe   Recipe  @relation(fields: [recipeId], references: [id])
  // recipeId Int

  // user       User     @relation(fields: [userId], references: [id])
  // userId     Int 
  // @@unique([name, recipeId])
}

model Etape {
  id           Int        @id @default(autoincrement())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingrediant @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  quantite     Int
  instructions String
}

// model Ingredient {
//   id     String               @id @default(cuid())
//   nom    String
// }

// model IngredientByRecipe {
//   id           Int        @id @default(autoincrement())
//   ingrediant   Ingredient @relation(fields: [ingrediantId], references: [id])
//   ingrediantId Int
//   recipe       Recipe     @relation(fields: [recipeId], references: [id])
//   recipeId     Int

//   @@unique([recipeId, ingrediantId])
// }

// model Post {
//   id      String @id @default(cuid())
//   title   String
//   content String
//   userId  String
//   topicId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   topic    Topic     @relation(fields: [topicId], references: [id])
//   comments Comment[]
// }
